#!/usr/bin/env bash
# CONFIGPATH v1
set -eu
cd ../"$(dirname "${0}")"/etc
if ! [ -f 'path.sh' ]; then
    touch path.sh
fi
. path.sh
#=====os=====
if [ -z "${myos:-}" ]; then
    os_type=$(uname -mrs)
    echo "Current OS: ${os_type}"
    os_type_main=$(echo ${os_type} | cut -f 1 -d ' ')
    os_type_version=$(echo ${os_type} | cut -f 2 -d ' ')
    echo "myos=\"${os_type_main}\" #${os_type_version}" >>path.sh
    unset os_type os_type_main os_type_version
fi
#=====path=====
echo -e "\e[33mLocating absolute path:\e[0m"
. ../lib/libpath
unset invalid_path duplicated_path
IFS=':'
eachpath=(${valid_path})
IFS=''
echo ${valid_path} | tr ':' '\n'
unset valid_path
#=====ls=====
if [ -z "${myls:-}" ]; then
    GNU_found=false
    for dir in "${eachpath[@]}"; do
        if ${GNU_found}; then
            break
        fi
        tmpf=$(mktemp -t configpath.XXXXXX)
        ls -F -1 "${dir}" | grep '.\*$' | sed "s;\*\$;;" | grep '^ls\(\.exe\)*$' | sed "s;^;$(echo ${dir})/;" >"${tmpf}"
        while read line; do
            ls_ver=$("${line}" --version 2>&1)
            if [[ "${ls_ver}" =~ .*"GNU".* ]]; then
                GNU_found=true
                if [[ "${ls_ver}" =~ .*"Cygwin".* ]]; then
                    type="GNU version in Cygwin systems"
                else
                    type="GNU version in GNU/Linux systems"
                fi
            else
                type="BSD version"
            fi
            echo "ls found in ${line}, ${type}"
            if ${GNU_found}; then
                echo "myls=\"${line}\" #${type}" >>path.sh
                break
            fi
            unset type
        done <"${tmpf}"
        rm "${tmpf}"
        unset tmpf dir
    done
    . path.sh
    if [ -z "${myls:-}" ]; then
        if [ -z "${line:-}" ]; then
            echo "myls=\"ls\" #UNKNOWN" >>path.sh
            echo -e "\e[30mERROR: ls still not found. Please configure it manually in LMP_ROOT/etc/path.sh.\e[0m"
        else
            echo -e "\e[30mWARNING: Will use BSD ls.\e[0m"
            echo "myls=\"${line}\" #${type}" >>path.sh
        fi
    fi
    unset ls_ver line
else
    echo "ls configured"
fi
#=====grep=====
if [ -z "${mygrep:-}" ]; then
    GNU_found=false
    for dir in "${eachpath[@]}"; do
        if ${GNU_found}; then
            break
        fi
        tmpf=$(mktemp -t configpath.XXXXXX)
        ${myls} -F -1 "${dir}" | grep '.\*$' | sed "s;\*\$;;" | grep '^grep\(\.exe\)*$' | sed "s;^;$(echo ${dir})/;" >"${tmpf}"
        while read line; do
            grep_ver=$("${line}" --version 2>&1)
            if [[ "${grep_ver}" =~ .*"GNU".* ]]; then
                GNU_found=true
                if [[ "${grep_ver}" =~ .*"BSD".* ]]; then
                    type="GNU version in BSD systems"
                elif [[ "${grep_ver}" =~ .*"Cygwin".* ]]; then
                    type="GNU version in Cygwin systems"
                else
                    type="GNU version in GNU/Linux systems"
                fi
            else
                type="UNKNOWN"
            fi
            echo "grep found in ${line}, ${type}"
            if ${GNU_found}; then
                echo "mygrep=\"${line}\" #${type}" >>path.sh
                break
            fi
        done <"${tmpf}"
        rm "${tmpf}"
        unset tmpf dir grep_ver line
    done
    . path.sh
    if [ -z "${mygrep:-}" ]; then
        echo "mygrep=\"grep\" #UNKNOWN" >>path.sh
        echo -e "\e[30mERROR: grep still not found. Please configure it manually in LMP_ROOT/etc/path.sh.\e[0m"
    fi
else
    echo "grep configured"
fi
#=====sed=====
if [ -z "${mysed:-}" ]; then
    GNU_found=false
    for dir in "${eachpath[@]}"; do
        if ${GNU_found}; then
            break
        fi
        tmpf=$(mktemp -t configpath.XXXXXX)
        ${myls} -F -1 "${dir}" | ${mygrep} '.\*$' | sed "s;\*\$;;" | ${mygrep} '^sed\(\.exe\)*$' | sed "s;^;$(echo ${dir})/;" >"${tmpf}"
        while read line; do
            sed_ver=$("${line}" --version 2>&1)
            if [[ "${sed_ver}" =~ .*"GNU".* ]]; then
                GNU_found=true
                if [[ "${sed_ver}" =~ .*"Cygwin".* ]]; then
                    type="GNU version in Cygwin systems"
                else
                    type="GNU version in GNU/Linux systems"
                fi
            else
                type="BSD version"
            fi
            echo "sed found in ${line}, ${type}"
            if ${GNU_found}; then
                echo "mysed=\"${line}\" #${type}" >>path.sh
                break
            fi
            unset type
        done <"${tmpf}"
        rm "${tmpf}"
        unset tmpf dir
    done
    . path.sh
    if [ -z "${mysed:-}" ]; then
        if [ -z "${line:-}" ]; then
            echo "mysed=\"sed\" #UNKNOWN" >>path.sh
            echo -e "\e[30mERROR: sed still not found. Please configure it manually in LMP_ROOT/etc/path.sh.\e[0m"
        else
            echo -e "\e[30mWARNING: Will use BSD sed.\e[0m"
            echo "mysed=\"${line}\" #${type}" >>path.sh
        fi
    fi
    unset sed_ver line
else
    echo "sed configured"
fi
#=====tar=====
if [ -z "${mytar:-}" ]; then
    GNU_found=false
    for dir in "${eachpath[@]}"; do
        if ${GNU_found}; then
            break
        fi
        tmpf=$(mktemp -t configpath.XXXXXX)
        ${myls} -F -1 "${dir}" | ${mygrep} '.\*$' | ${mysed} "s;\*\$;;" | ${mygrep} '^tar\(\.exe\)*$' | ${mysed} "s;^;$(echo ${dir})/;" >"${tmpf}"
        while read line; do
            tar_ver=$("${line}" --version 2>&1)
            if [[ "${tar_ver}" =~ .*"GNU".* ]]; then
                GNU_found=true
                if [[ "${tar_ver}" =~ .*"Cygwin".* ]]; then
                    type="GNU version in Cygwin systems"
                else
                    type="GNU version in GNU/Linux systems"
                fi
            else
                type="BSD version"
            fi
            echo "tar found in ${line}, ${type}"
            if ${GNU_found}; then
                echo "mytar=\"${line}\" #${type}" >>path.sh
                break
            fi
            unset type
        done <"${tmpf}"
        rm "${tmpf}"
        unset tmpf dir
    done
    . path.sh
    if [ -z "${mytar:-}" ]; then
        if [ -z "${line:-}" ]; then
            echo "mytar=\"tar\" #UNKNOWN" >>path.sh
            echo -e "\e[30mERROR: tar still not found. Please configure it manually in LMP_ROOT/etc/path.sh.\e[0m"
        else
            echo -e "\e[30mWARNING: Will use BSD tar.\e[0m"
            echo "mytar=\"${line}\" #${type}" >>path.sh
        fi
    fi
    unset tar_ver line
else
    echo "tar configured"
fi
#=====python=====
if [ -z "${mypython:-}" ]; then
    python_ver=3
    for dir in "${eachpath[@]}"; do
        tmpf=$(mktemp -t configpath.XXXXXX)
        ${myls} -F -1 "${dir}" | ${mygrep} '.\*$' | ${mysed} "s;\*\$;;" | ${mygrep} -E '^(python(3|)(\.[[:digit:]]+)*(d|m|u|)(.exe|)$)' | ${mysed} "s;^;$(echo ${dir})/;" >"${tmpf}"
        while read line; do
            echo "Python found in ${line}"
            curr_version=$("${line}" --version 2>&1 | cut -f 2 -d " ")
            if [[ "${curr_version}" == 3* ]] && [ $(expr "${curr_version}" \>= "${python_ver}") -eq 1 ]; then
                Out_C="${line}"
                python_ver="${curr_version}"
            fi
            unset curr_version line
        done <"${tmpf}"
        rm "${tmpf}"
        unset tmpf dir
    done
    if [ -n "${Out_C:-}" ]; then
        echo "mypython=\"${Out_C}\" #version ${python_ver}" >>path.sh
        echo "Python found in ${Out_C}, version ${python_ver}"
        unset Out_C
    else
        echo "mypython=\"python\" #UNKNOWN" >>path.sh
        echo -e "\e[30mERROR: Python still not found. Please configure it manually in LMP_ROOT/etc/path.sh.\e[0m"
    fi
    unset python_ver
else
    echo "python configured"
fi
. path.sh
echo -e "\e[33mAll configurations are printed as follows:\e[0m"
cat path.sh | ${mygrep} -v '^$' | ${mysed} 's/^my//' | ${mysed} 's/=/\\\\e[33m in \\\\e[0m/ ' | ${mysed} 's/ #/\\\\e[33m, \\\\e[32m/' | while read line; do echo -e "${line}\e[0m"; done
