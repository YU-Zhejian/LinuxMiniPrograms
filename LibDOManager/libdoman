#!/bin/bash
DN=`dirname $0`
echo -e "\e[33mYuZJLab LibDO Manager.\e[0m"
echo -e "\e[33mCopyright (C) 2020 YU Zhejian\e[0m"
if [ -f $DN/../lib/libisopt ] && [ -x $DN/../lib/libisopt ];then
    . $DN/../lib/libisopt
    echo -e "\e[33mlibisopt loaded.\e[0m">&2
else
    echo -e "\e[31mERROR: libisopt not found.\e[0m">&2
    exit 1
fi
if [ -f $DN/../lib/libmktbl ] && [ -x $DN/../lib/libmktbl ];then
    . $DN/../lib/libmktbl
    echo -e "\e[33mlibmktbl loaded.\e[0m">&2
else
    echo -e "\e[31mERROR: libmktbl not found.\e[0m">&2
    exit 1
fi
if [ -f $DN/../lib/libdate ] && [ -x $DN/../lib/libdate ];then
    . $DN/../lib/libdate
    echo -e "\e[33mlibdate loaded.\e[0m">&2
else
    echo -e "\e[31mERROR: libdate not found.\e[0m">&2
    exit 1
fi
more="more"
cmd=0
for opt in $@;do
    if isopt $opt;then
        case $opt in
            "-h"|"--help")
                echo -e "\e[33mThis is a LibDO Log Manager. Useage:"
                echo "libdo_man [libdo_output] [options]"
                echo
                echo "Available options:"
                echo "  -h|--help Dicplay this help."
                echo "  -v|--version Print version information."
                echo "  -o:[item]|--output:[item] Get the output of [item] (from 1)."
                echo "  --more:[program]|The GNU/Linux program \"more\" will be used if there's too much output. Use [program] to replace it."
                echo -e "\e[0m"
                exit 0
            ;;
            "-v"|"--version")
                echo -e "\e[31mVersion 3 patch 1, compatiable with libdo Version 1.\e[0m"
                exit 0
            ;;
            -o\:*)
                cmd=${opt:3}
            ;;
            --output\:*)
                cmd=${opt:9}
            ;;
            --more\:*)
                more=${opt:7}
            ;;
            *)
                echo -e "\e[31mERROR: Option '$opt' invalid.\e[0m"
                exit 1
        esac
        OPT="$OPT $opt"
    else
        STDS="$STDS $opt"
    fi
done
STDI=($STDS)
if [ ${#STDI[@]} -gt 1 ];then
    echo -e "\e[33m More than one filename was received. Will disable -o option.\e[0m"
    cmd=0
fi
for fn in ${STDI[@]};do
    if ! [ -f $fn ] || [ -z $fn ];then
        echo -e "\e[31mERROR: Filename '$fn' invalid. Use libdoman -h for help.\e[0m"
        exit 1
    fi
    Proj=0
    ln=0
    status=2
    while read line;do
        ln=$[$ln+1]
        case $line in
            "LIBDO IS GOING TO EXECUTE"*)
                if [ $status -eq 1 ];then
                    Proj_Cont_e[$Proj]=$[$ln-1]
                    Proj_Time_e[$Proj]=0
                    Proj_Exit[$Proj]="-1"
                    Proj_Time[$Proj]="ERR"
                fi
                Proj=$[$Proj+1]
                status=1
                Proj_CMD[$Proj]=${line:26}
            ;;
            "LIBDO STARTED AT"*)
                Proj_Time_s[$Proj]=`echo ${line:17}|sed "s/.$//"`
            ;;
            "LIBDO PID"*)
                Proj_Cont_s[$Proj]=$[$ln+1]
            ;;
            "LIBDO STOPPED AT"*)
                Proj_Cont_e[$Proj]=$[$ln-1]
                Proj_Time_e[$Proj]=`echo ${line:17}|sed "s/.$//"`
                Proj_Time[$Proj]=`timediff "${Proj_Time_s[$Proj]}" "${Proj_Time_e[$Proj]}"`
            ;;
            "LIBDO EXITED SUCCESSFULLY.")
                status=2
                Proj_Exit[$Proj]="0"
            ;;
            "LIBDO FAILED, GOT"*)
                status=2
                Proj_Exit[$Proj]=`echo ${line:21}|sed "s/.$//"`
        esac
    done < $fn
    if [ $status -eq 1 ];then
        Proj_Cont_e[$Proj]=$[$ln-1]
        Proj_Time_e[$Proj]=0
        Proj_Exit[$Proj]="-1"
        Proj_Time[$Proj]="ERR"
    fi
    echo -e "\e[33mFile $fn loaded \e[0m"
    if [ $cmd = 0 ];then
        table=`mktemp -t libdo_man.XXXXXX`
        echo -e "\#1\n\#S90\n\#1\n\#1">$table
        echo "Index;COMMAND;EXIT_STATUS;TIME">>$table
        for ((i=1;i<=$Proj;i++));do
            echo "$i;${Proj_CMD[$i]};${Proj_Exit[$i]};${Proj_Time[$i]}"|sed "s/ /_/g">>$table
        done
        mktbl $table
        rm $table
    else
        if [ $Proj -lt $cmd ];then echo -e "\e[31mERROR: $cmd too large.\e[0m">&2;exit 1;fi
        echo "JOB_CMD     : ${Proj_CMD[$cmd]}"
        echo "TIME        : ${Proj_Time_s[$cmd]} to ${Proj_Time_e[$cmd]}, Total ${Proj_Time[$cmd]}"
        echo "EXIT_STATUS : ${Proj_Exit[$cmd]}"
        echo "__________JOB_OUTPUT__________"
        if [ ${Proj_Cont_s[$cmd]} -ge ${Proj_Cont_e[$cmd]} ];then
            echo -e "\e[33mNO_OUTPUT\e[0m"
        else
            cat -n  $fn|head -n $[${Proj_Cont_e[$cmd]}]|tail -n $[${Proj_Cont_e[$cmd]}-${Proj_Cont_s[$cmd]}+1]|$more
        fi
        echo "_____JOB_OUTPUT_FINISHED______"
    fi
    unset Proj Proj_CMD Proj_Cont_e Proj_Cont_s Proj_Exit Proj_Time_e Proj_Time_s
done
echo -e "\e[33mFinished.\e[0m">&2
exit 0
