#!/usr/bin/env bash
# AUTOUNZIP V3
set -euo pipefail
ISAOTOZIP=false
USESPLIT=false
DN=$(dirname ${0})
. ${DN}/exec/libautozip.sh
# ============ Start ============
echo -e "\e[33mYuZJLab AutoUnZip"
echo -e "Copyright (C) 2019-2020 YU Zhejian\e[0m"
preck
ppopt "${@}"
# ============ Possess arguments ============
STDI=(${STDS})
fulln="${STDI[0]:-}"
if [ -z ${fulln} ]; then
    autozipck
    exit 0
elif [ -e "${fulln}.001" ]; then
    USESPLIT=true
    mktmp
elif ! [ -e ${fulln} ]; then
    echo -e "\e[31mERROR: Filename '${fulln}' invalid.\e[0m"
    exit 1
fi
fn="${fulln%.*}"
ext="${fulln##*.}"
if [ "${fn##*.}" = "tar" ]; then
    ext="tar.${ext}"
    fn="${fn%.*}"
elif [[ "${fulln}" =~ .*".part1.rar" ]]; then
    fn=$(echo ${fulln} | ${mysed} "s/.part1.rar//")
fi
if [[ "tar,tar.gz,tgz,tar.GZ,tar.xz,txz,tar.bz2,bz,tar.lzma,tar.lz,tlz,gz,bgz,GZ,xz,bz2,lzma,lz" =~ .*"ext".* ]]; then
    echo -e "\e[31mERROR: Extension name '${ext}' invalid.\nYou can execute 'autozip' without any argument or option to check available method and extension.\e[0m"
    exit 1
else
    echo -e "\e[33mReceived: ${0} ${fulln} ${OPT} ==>Extension=${ext}\e[0m"
fi
if [ -e "${fn}" ]; then
    if ${ISFORCE}; then
        ${myrm} -rf "${fn}"
    else
        ${mymv} -f "${fn}" "${fn}".bak
    fi
fi
# ============ Start Decompressing ============
case ${ext} in
"tar") # ============ tar ============
    if [ "${mytar}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: Tar NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        file_i=1
        in_i=001
        while [ -f "${fulln}".${in_i} ]; do
            "${mycat}" "${fulln}".${in_i} >>"${tempf}"
            file_i=$((${file_i} + 1))
            in_i=$(fixthree ${file_i})
        done
        unset file_i in_1
        "${mytar}" -xvf "${tempf}"
    else
        "${mytar}" -xvf "${fulln}"
    fi
    ;;
"tar.gz" | "tgz" | "tar.GZ") # ============ tgz ============
    if [ "${mygzip}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: GZip NO exist!\e[0m"
        exit 1
    fi
    if [ "${mytar}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: Tar NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        stdtc "\"${mygzip}\" -dk"
    else
        "${mytar}" -xzvf "${fulln}"
    fi
    ;;
"tar.xz" | "txz") # ============ txz ============
    if [ "${myxzip}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: XZ NO exist!\e[0m"
        exit 1
    fi
    if [ "${mytar}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: Tar NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        stdtc "\"${myxz}\" -dk"
    else
        "${mytar}" -xJvf "${fulln}"
    fi
    ;;
"tar.bz2" | "tbz") # ============ tbz ============
    if [ "${mybzip2}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: BZip2 NO exist!\e[0m"
        exit 1
    fi
    if [ "${mytar}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: Tar NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        stdtc "\"${mybzip2}\" -dk"
    else
        "${mytar}" -xjvf "${fulln}"
    fi
    ;;
"tar.lzma" | "tar.lz" | "tlz") # ============ tlz ============
    if [ "${myxzip}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: LZMA SDK NO exist!\e[0m"
        exit 1
    fi
    if [ "${mytar}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: Tar NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        stdtc "\"${myxz}\" -dk --format=lzma"
    else
        "${myxz}" -dc "${fulln}" | "${mytar}" -xv -f -
    fi
    ;;
"gz" | "GZ") # ============ gz ============
    if [ "${myzgip}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: GZip NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        stdfc "\"${mygz}\" -dk"
    else
        if ${USEPARALLEL} && [ $PIGZ -eq 0 ]; then
            "${mycat}" "${fulln}" | "${mypigz}" -dc >"${fn}"
        else
            "${mycat}" "${fulln}" | "${mygzip}" -dc >"${fn}"
        fi
    fi
    ;;
"xz") # ============ xz ============
    if [ "${myxzip}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: XZ NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        stdfc "\"${myxz}\" -dk"
    else
        "${myxz}" -dk "${fulln}"
    fi
    ;;
"bz2") # ============ bz2 ============
    if [ "${mybzip2}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: BZip2 NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        stdfc "\"${mybzip2}\" -dk"
    else
        \"${mybzip2}\" -dk "${fulln}"
    fi
    ;;
"lz" | "lzma") # ============ lz ============
    if [ "${myxzip}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: XZ NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then
        stdfc "\"${myxz}\" -dk --format=lzma"
    else
        "${myxz}" -dk --format=lzma "${fulln}"
    fi
    ;;
"7z") # ============ 7z ============
    if [ "${my7z}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: p7zip NO exist!\e[0m"
        exit 1
    fi
    if ${USESPLIT}; then SUFF=".001"; fi
    if ${USEPARALLEL}; then PAR="-mmt0"; fi
    "${my7z}" -y ${PAR} x "${fulln}"${SUFF}
    ;;
"zip") # ============ zip ============
    if [ "${myunzip}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: unzip NO exist!\e[0m"
        exit 1
    fi
    if [ -f "${fn}".z01 ]; then
        if [ "${myzip}" = 'ylukh' ]; then
            echo -e "\e[31mERROR: zip NO exist!\e[0m"
            exit 1
        fi
        ${mycp} "${fn}".z* "${tempdir}"/
        "${myzip}" -FF "${tempdir}"/"${fn}".zip --out "${tempdir}"/"${fn}".fzip
        "${myunzip}" "${tempdir}"/"${fn}".fzip
    else
        "${myunzip}" "${fulln}"
    fi
    ;;
"rar")
    if [ "${myunrar}" = 'ylukh' ]; then
        echo -e "\e[31mERROR: unrar NO exist!\e[0m"
        exit 1
    fi
    if ${USEPARALLEL}; then PAR="-mt8"; fi
    "${myunrar}" ${PAR} x "${fulln}"
    ;;
esac
# ============ Finished ============
echo -e "\e[33mRemoving temporary resources...\e[0m"
if ${USESPLIT}; then
    "${myrm}" -rf "${tempdir}" "${tempf}"
fi
if ${REMOVE}; then
    if ${USESPLIT}; then
        file_i=1
        in_i=001
        while [ -f "${fulln}".${in_i} ]; do
            "${myrm}" -rf "${fulln}".${in_i}
            file_i=$((${file_i} + 1))
            in_i=$(fixthree ${file_i})
        done
    else
        "${myrm}" -rf "${fulln}"
    fi
fi
echo -e "\e[33mFinished.\e[0m"
exit 0
