#!/usr/bin/env bash
# INCLUDELS v1
set -ue
DN="$(readlink -f "$(dirname "${0}")")"
. "${DN}"/../lib/libisopt
. "${DN}"/../lib/libstr
. "${DN}"/../etc/path.sh
infoh "YuZJLab INCLUDEPATH ls"
infoh "Copyright (C) 2019-2020 YU Zhejian"
oldifs="${IFS}"
more="${mymore}"

gccinclude=$(for dir in /lib*/gcc*/*/*/include \
	/usr/lib*/gcc*/*/*/include \
	/usr/local/lib*/gcc*/*/*/include \
	"${HOME}"/usr/lib*/gcc*/*/*/include \
	"${HOME}"/usr/local/lib*/gcc*/*/*/include \
	/lib*/gcc*/*/include \
	/usr/lib*/gcc*/*/include \
	/usr/local/lib*/gcc*/*/include \
	"${HOME}"/usr/lib*/gcc*/*/include \
	"${HOME}"/usr/local/lib*/gcc*/*/include \
	/lib*/gcc*/include \
	/usr/lib*/gcc*/include \
	/usr/local/lib*/gcc*/include \
	"${HOME}"/usr/lib*/gcc*/include \
	"${HOME}"/usr/local/lib*/gcc*/include; do echo ${dir}; done | "${mygrep}" -v '*' | tr '\n' ':')

clanginclude=$(for dir in /lib*/clang*/*/include \
	/usr/lib*/clang*/*/include \
	/usr/local/lib*/clang*/*/include \
	"${HOME}"/usr/lib/clang*/*/include \
	"${HOME}"/usr/local/lib/clang*/*/include \
	/lib*/clang*/include \
	/usr/lib*/clang*/include \
	/usr/local/lib*/clang*/include \
	"${HOME}"/usr/lib/clang*/include \
	"${HOME}"/usr/local/lib/clang*/include; do echo ${dir}; done | "${mygrep}" -v '*' | tr '\n' ':')

INPATH="/usr/include:/usr/local/include:${HOME}/include:${HOME}/usr/include:${HOME}/usr/local/include:${gccinclude}:${clanginclude}:${C_INCLUDE_PATH:-}"${CPLUS_INCLUDE_PATH:-}
. "${DN}"/../lib/libpath
IFS=":"
eachpath=(${valid_path})
unset duplicated_path invalid_path
IFS=''
STDS=()
for opt in "${@}"; do
	if isopt "${opt}"; then
		case "${opt}" in
		"-h" | "--help")
			yldoc includels
			exit 0
			;;
		"-v" | "--version")
			echo "Version 1"
			exit 0
			;;
		"-l" | "--list")
			echo ${valid_path} | tr ':' '\n'
			unset valid_path
			exit 0
			;;
		--more\:*)
			more=$"{opt:7}"
			if $(
				"${more}" --help &> /dev/null
				echo ${?}
			) -eq 127; then
				warnh "Invalid More '${more}'! Will use original '${mymore}' instead"
				more="${mymore}"
			else
				infoh "Will use '${more}' as More"
			fi
			;;
		*)
			warnh "Option '${opt}' invalid. Ignored"
			;;
		esac
	else
		STDS=(${STDS[@]} "${opt}")
	fi
done
unset valid_path
tmpf="$(mktemp -t pls.XXXXXX)"
infoh "Reading database..."
for dir in "${eachpath[@]}"; do
	"${myfind}" "${dir}" 2> /dev/null >> "${tmpf}" || true
done
if [ ${#STDS[@]} -eq 0 ]; then
	"${mycat}" "${tmpf}" | "${more}"
else
	IFS=''
	grepstr=''
	for fn in "${STDS[@]}"; do
		grepstr="${grepstr} -e ${fn}"
	done
	eval "${mycat}" \"${tmpf}\"\|"${mygrep}" "${grepstr}"\|"${more}"
fi
rm "${tmpf}"
IFS="${oldifs}"
