#!/usr/bin/env bash
VERSION=1.4
builtin set -eu
DN="$(readlink -f "$(dirname "${0}")")"
. "${DN}"/../lib/libisopt
. "${DN}"/../lib/libstr
. "${DN}"/../etc/path.conf
. "${DN}"/exec/pathutils.sh
infoh "YuZJLab INCLUDEPATH ls"
infoh "Copyright (C) 2019-2021 YU Zhejian"
# shellcheck disable=SC2063
gccinclude=$(for dir in \
    $(__addpref 'lib*/gcc*/*/*/include') \
    $(__addpref 'lib*/gcc*/*/include') \
    $(__addpref 'lib*/gcc*/include'); do builtin echo "${dir}"; done | grep -v '*' | tr '\n' ':')

# shellcheck disable=SC2063
clanginclude=$(for dir in \
    $(__addpref 'lib*/clang*/*/include') \
    $(__addpref 'lib*/clang*/include'); do builtin echo "${dir}"; done | grep -v '*' | tr '\n' ':')

# shellcheck disable=SC2034
INPATH="/clang*/include:/mingw*/include:$(__addpref 'include'):${gccinclude}:${clanginclude}:${C_INCLUDE_PATH:-}"${CPLUS_INCLUDE_PATH:-}
. "${DN}"/../lib/libpath
# shellcheck disable=SC2154
builtin mapfile -t eachpath  < <(builtin echo ${valid_path} | tr ' ' '\n' )
builtin unset duplicated_path invalid_path
STDS=()
for opt in "${@}"; do
    if isopt "${opt}"; then
        case "${opt}" in
        "-h" | "--help")
            yldoc includels
            builtin exit 0
            ;;
        "-v" | "--version")
            builtin echo ${VERSION}
            builtin exit 0
            ;;
        "-l" | "--list")
            builtin echo ${valid_path} | tr ':' '\n'
            builtin unset valid_path
            builtin exit 0
            ;;
        "-x")
            builtin set -x
            ;;
        *)
            warnh "Option '${opt}' invalid. Ignored"
            ;;
        esac
    else
        STDS=("${STDS[@]}" "${opt}")
    fi
done
builtin unset valid_path
tmpf="$(mktemp -t pls.XXXXXX)"
infoh "Reading database..."
for dir in "${eachpath[@]}"; do
    find "${dir}" 2>/dev/null >>"${tmpf}" || true
done
if [ ${#STDS[@]} -eq 0 ]; then
    cat "${tmpf}"
else
    grepstr=''
    for fn in "${STDS[@]}"; do
        grepstr="${grepstr} -e ${fn}"
    done
    builtin eval cat \"${tmpf}\"\|grep "${grepstr}"
fi
rm "${tmpf}"
