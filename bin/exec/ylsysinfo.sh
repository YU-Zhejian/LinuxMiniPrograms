. "${DN}"/../lib/libisopt
OLD_IFS="${IFS}"
for opt in "${@}"; do
    if isopt "${opt}"; then
        case "${opt}" in
        "-h" | "--help")
            echo "No documentation for this product. Use 'ylsysinfo' right away or '-v|--version' option for version information.."
            exit 0
            ;;
        "-v" | "--version")
            echo "Version 1"
            exit 0
            ;;
        esac
    fi
done
echo -e "\e[033mChecking operating systems:\e[0m"
if [ -r /proc/version ]; then
    echo -e "\e[033mSystem information generated by '/proc/version':\e[0m"
    verstr="$("${mycat}" /proc/version)"
    echo "${verstr}"
    IFS=' '
    verstrs=(${verstr})
    IFS=''
    tmpf="$(mktemp ylsysinfo.XXXXX)"
    echo -e '#1\n#1' > "${tmpf}"
    echo "System type;${verstrs[0]}" >> "${tmpf}"
    echo "Kernel version;${verstrs[2]}" >> "${tmpf}"
    echo "Kernel built by;${verstrs[3]:1:-1}" >> "${tmpf}"
    unset verstrs[0] verstrs[1] verstrs[2] verstrs[3]
    gcc_pre=$(echo ${verstrs[*]} | "${mysed}" 's;).*$;;' | "${mysed}" 's;(;;')
    IFS='('
    gcc_pres=(${gcc_pre})
    IFS=''
    date_pre=$(echo ${verstrs[*]} | "${mysed}" 's;^.*);;' | "${mysed}" 's;#1 SMP;;' | "${mysed}" 's;^\s+;;')
    echo "Kernel built with GCC;${gcc_pres[0]}" >> "${tmpf}"
    echo "Kernel built on platform;${gcc_pres[1]}" >> "${tmpf}"
    echo "Kernel built on date;${date_pre}" >> "${tmpf}"
    ylmktbl "${tmpf}"
    rm "${tmpf}"
    unset verstr verstrs date_pre gcc_pre gcc_pres
else
    echo -e "\e[031mFailed to read '/proc/version'\e[0m"
fi
if uname -a &>>/dev/null; then
    echo -e "\e[033mSystem information generated by 'uname -a':\e[0m"
    verstr="$(uname -a)"
    echo "${verstr}"
    IFS=' '
    verstrs=(${verstr})
    IFS=''
    hoststr="${verstrs[1]}"
    tmpf="$(mktemp ylsysinfo.XXXXX)"
    echo -e '#1\n#1' > "${tmpf}"
    echo "System type;${verstrs[0]}" >> "${tmpf}"
    echo "Kernel version;${verstrs[2]}" >> "${tmpf}"
    echo "Kernel architecture;${verstrs[-1]} ${verstrs[-2]}" >> "${tmpf}"
    unset verstrs[0] verstrs[1] verstrs[2] verstrs[-2] verstrs[-1]
    date_pre=$(echo ${verstrs[*]} | "${mysed}" 's;#1 SMP;;' | "${mysed}" 's;^\s+;;')
    echo "Kernel built on date;${date_pre}" >> "${tmpf}"
    echo "Network host name;${hoststr}" >> "${tmpf}"
    ylmktbl "${tmpf}"
    rm "${tmpf}"
    unset verstr verstrs date_pre hoststr
else
    echo -e "\e[031mFailed to execute 'uname -a'\e[0m"
fi
echo -e "\e[033mChecking users:\e[0m"
if id -a &>>/dev/null || id &>>/dev/null; then
    echo -e "\e[033mUser information generated by 'id -a||id'\e[0m"
    verstr=$(id -a || id)
    echo -e "\t${verstr}"
    IFS=' '
    verstrs=(${verstr})
    IFS=''
    echo -e "User name;$(echo ${verstrs[0]} | "${mysed}" 's;^.*(;;' | "${mysed}" 's;).*$;;')"
    echo -e "User ID;$(echo ${verstrs[0]} | "${mysed}" 's;^.*=;;' | "${mysed}" 's;(.*$;;')"
    echo -e "User major group name;$(echo ${verstrs[1]} | "${mysed}" 's;^.*(;;' | "${mysed}" 's;).*$;;')"
    echo -e "User major group ID;$(echo ${verstrs[1]} | "${mysed}" 's;^.*=;;' | "${mysed}" 's;(.*$;;')"
    unset verstrs[0] verstrs[1]
    IFS=' '
    verstr="${verstrs[*]}"
    IFS=','
    verstrs=(${verstr})
    IFS=''
    for ((i = 3; i < ${#verstrs[@]}; i++)); do
        echo -e "User minor group name;$(echo ${verstrs[${i}]} | "${mysed}" 's;^.*(;;' | "${mysed}" 's;).*$;;')"
        echo -e "User minor group ID;$(echo ${verstrs[${i}]} | "${mysed}" 's;^.*=;;' | "${mysed}" 's;(.*$;;')"
    done
    unset verstr verstrs
else
    echo -e "\e[031mFailed to execute 'id -a||id'\e[0m"
fi
if [ -r /etc/passwd ]; then
    echo -e "\e[033mUser information generated by '/etc/passwd':\e[0m"
    "${mycat}" /etc/passwd | while read line; do
        IFS=":"
        lines=(${line})
        IFS=''
        echo -e "User name;${line[0]}"
        echo -e "\tUser ID;${line[2]}"
        echo -e "\tUser group ID;${line[3]}"
        echo -e "\tUser gecos;${line[4]}"
        echo -e "\tUser home directory;${line[6]}"
        echo -e "\tUser Shell;${line[6]}"
    done
    unset line lines
fi
echo -e "\e[033mChecking file systems:\e[0m"
if mount &>>/dev/null; then
    echo -e "\e[033mFile system information generated by 'mount':\e[0m"
    mount | "${mysed}" 's;^;\t;'
fi
echo -e "\e[033mChecking hardware:\e[0m"
if [ -r /proc/cpuinfo ]; then
    echo -e "\e[033mCPU information generated by '/proc/cpuinfo':\e[0m"
    "${mycat}" /proc/cpuinfo | "${mygrep}" -v '^$' | while read line; do
        IFS=":"
        lines=(${line})
        IFS=''
        lines[0]=$(echo ${lines[0]} | "${mysed}" 's;\s*$;;')
        if [[ "${line}" =~ "processor".*: ]]; then
            echo -e "${lines[0]};${lines[1]}"
        else
            echo -e "\t${lines[0]};${lines[1]:-}"
        fi
    done
    unset line lines
fi
echo -e "\e[033mChecking environment:\e[0m"
if env &>>/dev/null; then
    echo -e "\e[033mEnvironmental information generated by 'env':\e[0m"
    env | while read line; do
        IFS="="
        lines=(${line})
        IFS=''
        pref=${lines[0]}
        unset lines[0]
        IFS="="
        line="${lines[*]}"
        IFS=""
        echo -e "${pref};${line}"
    done
    unset line lines
fi

echo -e "\e[033mSearching for Python:\e[0m"
IFS="${OLD_IFS}"
