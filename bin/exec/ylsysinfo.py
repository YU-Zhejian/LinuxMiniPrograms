#!/usr/bin/env python
# YLSYSINFO.py V1
from LMP_Pylib.libisopt import *
from LMP_Pylib.libmktbl import *
import os,sys,re
cmd=0
for sysarg in sys.argv[2:]:
    if isopt(sysarg):
        if sysarg=='-h' or sysarg=='--help':
            print("No documentation for this product. Use 'ylsysinfo' right away or '-v|--version' option for version information..")
            exit(0)
        elif sysarg=='-v' or sysarg=='--version':
            print('Version 1')
            exit(0)
tmpf = mktemp("ylsysinfo.XXXXX")

print("\033[033mChecking operating systems:\033[0m")
if os.path.isfile("/proc/version"):
    print("\033[033mSystem information generated by '/proc/version':\033[0m")
    verstr=ylread("/proc/version")
    print(verstr)
    verstrs=verstr.split(" ")
    tbl=["#1","#1"]
    tbl.append("System type;"+verstrs[0])
    tbl.append("Kernel version;"+verstrs[2])
    tbl.append("Kernel built by;"+verstrs[3][1:-1])
    gcc_ct_l=re.findall(r'\(.+\)',' '.join(verstrs[4:]))[0][1:-1].replace("gcc version ","").split(' ')
    tbl.append("Kernel built using GCC version;" + gcc_ct_l[0])
    tbl.append("Kernel built using GCC released on;" + gcc_ct_l[1])
    gcc_ct_l = re.findall(r'\(.+?\)', ' '.join(gcc_ct_l[2:]))[0][1:-1].split(' ')
    tbl.append("Kernel built using GCC on platform;" + ' '.join(gcc_ct_l[0:-1]))
    tbl.append("Kernel built using GCC version (detailed);" + gcc_ct_l[-1])
    tbl.append("Kernel built on date;"+re.findall(".*\)(.*)",verstr)[0].replace("#1 SMP","").strip())
    ylwrite(tmpf,'\n'.join(tbl))
    mktbl(tmpf)
else:
    print("\033[031mFailed to read '/proc/version'\033[0m")

if not os.system("uname -a &>>/dev/null"):
    print("\033[033mSystem information generated by 'uname -a':\033[0m")
    verstr=yldo("uname -a")
    print(verstr)
    verstrs=verstr.split(" ")
    tbl=["#1","#1"]
    tbl.append("System type;"+verstrs[0])
    tbl.append("Kernel version;"+verstrs[2])
    tbl.append("Kernel architecture;"+verstrs[-1]+" "+verstrs[-2])
    tbl.append("Kernel built on date;"+" ".join(verstrs[3:-3]).replace("#1 SMP","").strip())
    tbl.append("Network host name;" + verstrs[1])
    ylwrite(tmpf,'\n'.join(tbl))
    mktbl(tmpf)
else:
    print("\033[031mFailed to execute 'uname -a'\033[0m")

print("\033[033mChecking users:\033[0m")
if not os.system("id -a &>> /dev/null || id &>> /dev/null"):
    print("\033[033mSystem information generated by 'id -a||id':\033[0m")
    verstr=yldo("id -a|id")
    print(verstr)
    verstrs=verstr.split(' ')
    tbl = ["#1", "#1"]
    tbl.append("User name;"+re.findall(r'\(.+?\)',verstrs[0])[0][1:-1])
    tbl.append("User ID;"+re.findall(r'=.+?\(',verstrs[0])[0][1:-1])
    tbl.append("User major group name;"+re.findall(r'\(.+?\)',verstrs[1])[0][1:-1])
    tbl.append("User major group ID;"+re.findall(r'=.+?\(',verstrs[1])[0][1:-1])
    ylwrite(tmpf,'\n'.join(tbl))
    mktbl(tmpf)
    verstrs=' '.join(verstrs[2:]).split(',')[1:]
    tbl = ["#1", "#1",'User minor group name;User minor group ID']
    for id in verstrs:
        tbl.append(re.findall(r'\(.+?\)',id)[0][1:-1]+';'+re.findall(r'^.+?\(',id)[0][0:-1])
    ylwrite(tmpf,'\n'.join(tbl))
    mktbl(tmpf)
else:
    print("\033[031mFailed to execute 'id -a||id'\033[0m")

if os.path.isfile("/etc/passwd"):
    print("\033[033mSystem information generated by '/etc/passwd':\033[0m")
    tbl=["#1","#1","#1","#1","#50","#1","#1",'User name;User password;User ID;User group ID;User gecos;User home directory;User Shell']
    tbl.extend(ylread("/etc/passwd").replace(':',';').split('\n'))
    ylwrite(tmpf,'\n'.join(tbl))
    mktbl(tmpf)
else:
    print("\033[031mFailed to read '/etc/passwd'\033[0m")

print("\033[033mChecking file system:\033[0m")
if not os.system("mount &>> /dev/null"):
    print("\033[033mSystem information generated by 'mount':\033[0m")
    tbl = ["#1", "#1", "#1", "#1","Devise;Mount point;Type;Info"]
    for line in yldo("mount").split('\n'):
        tbl.append(line.replace(" on ",";").replace(" type ",";").replace(" (",";").replace(")",""))
    ylwrite(tmpf,'\n'.join(tbl))
    mktbl(tmpf)
else:
    print("\033[031mFailed to execute 'mount'\033[0m")
os.remove(tmpf)
