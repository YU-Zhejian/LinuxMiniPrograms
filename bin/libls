#!/usr/bin/env bash
VERSION=1.7
builtin set -eu
DN="$(readlink -f "$(dirname "${0}")")"
. "${DN}"/../etc/linuxminiprograms/path.conf
. "${DN}"/../shlib/libinclude.sh
__include libisopt
__include libstr
__include libpath
infoh "YuZJLab LIBRARY ls"
infoh "Copyright (C) 2019-2021 YU Zhejian"
_grep() {
    builtin local regstr
    regstr="${1}"
    cat "${tmpf}" | grep "${regstr}" >>"${tmpff}"
    builtin unset regstr
}


# shellcheck disable=SC2063
gcclib=$(for dir in \
    $(__addpref 'lib*') \
    $(__addpref 'lib*/gcc*/*/*/x*') \
    $(__addpref 'lib*/gcc*/*/x*') \
    $(__addpref 'lib*/gcc*/x*') ; do builtin echo "${dir}"; done | grep -v '*' | tr '\n' ':')

# shellcheck disable=SC2063
clanglib=$(for dir in \
    $(__addpref 'lib*/clang*/*/lib*') \
    $(__addpref 'lib*/clang*/lib*') ; do builtin echo "${dir}"; done | grep -v '*' | tr '\n' ':')
msys2_gcclib=""
msys2_clanglib=""
for dir_path in mingw32 mingw64 clang32 clang64 ucrt32 ucrt64; do
    # shellcheck disable=SC2063
    msys2_gcclib_tmp=$(for dir in \
        $(__addpref_msys2 'lib*' "${dir_path}") \
        $(__addpref_msys2 'lib*/gcc*/*/*/x*' "${dir_path}") \
        $(__addpref_msys2 'lib*/gcc*/*/x*' "${dir_path}") \
        $(__addpref_msys2 'lib*/gcc*/x*' "${dir_path}"); do builtin echo "${dir}"; done | grep -v '*' | tr '\n' ':')
    msys2_gcclib="${msys2_gcclib}:${msys2_gcclib_tmp}"

    # shellcheck disable=SC2063
    msys2_clanglib_tmp=$(for dir in \
        $(__addpref_msys2 'lib*/clang*/*/lib*' "${dir_path}") \
        $(__addpref_msys2 'lib*/clang*/lib*' "${dir_path}"); do builtin echo "${dir}"; done | grep -v '*' | tr '\n' ':')
    msys2_clanglib="${msys2_clanglib}:${msys2_clanglib_tmp}"
done

ld_lib="$(ld --verbose || true | grep SEARCH_DIR | tr ';' '\n' | cut -f 2 -d '=' | cut -f 1 -d '"' | tr '\n' ';')"
validate_path "${msys2_clanglib}:\
${msys2_gcclib}:\
${gcclib}:${clanglib}:\
${ld_lib}:\
${LD_LIBRARY_PATH:-}:\
${LIBRARY_PATH:-}:\
${LD_RUN_PATH:-}"
builtin unset local_lib ld_lib
# shellcheck disable=SC2154
builtin mapfile -t eachpath < <(builtin echo ${valid_path} | tr ':' '\n')
builtin unset duplicated_path invalid_path

STDS=()
allow_s=true
allow_a=true
WINDOWS=false
for opt in "${@}"; do
    if isopt "${opt}"; then
        case "${opt}" in
        "-h" | "--help")
            man libls
            builtin exit 0
            ;;
        "-v" | "--version")
            builtin echo ${VERSION}
            builtin exit 0
            ;;
        "-l" | "--list")
            builtin echo ${valid_path} | tr ':' '\n'
            builtin unset valid_path
            builtin exit 0
            ;;
        "-a" | "--static-only")
            allow_a=true
            allow_s=false
            ;;
        "-s" | "--dynamic-only")
            allow_s=true
            allow_a=false
            ;;
        "-w" | "--windows")
            WINDOWS=true
            ;;
        "-x")
            builtin set -x
            ;;
        *)
            warnh "Option '${opt}' invalid. Ignored"
            ;;
        esac
    else
        STDS=("${STDS[@]}" "${opt}")
    fi
done
builtin unset valid_path
tmpf="$(mktemp -t libls.XXXXXX)"
infoh "Reading database..."
for dir in "${eachpath[@]}"; do
    find "${dir}" 2>/dev/null >>"${tmpf}" || true
done
tmpff=$(mktemp -t libls.XXXXXX)
if ${WINDOWS}; then
    ! ${allow_s} || _grep '\.dll$'
    ! ${allow_s} || _grep '\.DLL$'
    ! ${allow_a} || _grep '\.lib$'
    ! ${allow_a} || _grep '\.LIB$'
else
    ! ${allow_s} || _grep '\.so\(\..*\)*$'
    ! ${allow_a} || _grep '\.a\(\..*\)*$'
fi
mv "${tmpff}" "${tmpf}"
if [ ${#STDS[@]} -eq 0 ]; then
    cat "${tmpf}"
else
    grepstr=''
    for fn in "${STDS[@]}"; do
        grepstr="${grepstr} -e ${fn}"
    done
    builtin eval cat \"${tmpf}\"\|grep "${grepstr}"
fi
rm "${tmpf}"
