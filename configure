#!/usr/bin/env bash
VERSION=2.9
builtin set -eu
if [ ${BASH_VERSINFO[0]} -lt 4 ] && [ ${BASH_VERSINFO[1]} -lt 4 ]; then
    builtin echo -e "\033[31mERROR: Your Bash is obsolete.
To run LinuxMiniPrograms, you need Bash >=4.4\033[0m"
fi
if ! readlink -f . &>/dev/null; then
    if ! greadlink -f . &>/dev/null; then
        builtin echo -e "\033[31mERROR: NO readlink & greadlink available
For MacOS users, please install 'coreutils' by HomeBrew
For BSD users, please install 'coreutils' by your package management systems\033[0m"
        builtin exit 1
    else
        ln -s "$(which greadlink)" "$(greadlink -f "$(dirname "${0}")")"/bin/readlink || true
        PATH="$(greadlink -f "$(dirname "${0}")")/bin:${PATH}"
        builtin export PATH
    fi
fi
builtin cd "$(readlink -f "$(dirname "${0}")")"
. lib/libisopt
. lib/libstr
infoh "Configure file for YuZJLab Installer"
infoh "Copyright (C) 2019-2021 YU Zhejian"
# ./opt/lmp_dev/bin/BeforeAdd.sh
# ========Def Var========
VAR_install_config=false
VAR_clear_history=false
VAR_install_man=false
VAR_install_html=false
VAR_install_pdf=false
VAR_install_usage=false
VAR_update_path=true
MAKE_TARGETS="etc var pp"
MAKE_ARGS=""
PREFIX="${HOME}/usr/local"
# ========Read Opt========
STDS=()
for opt in "${@}"; do
    if isopt "${opt}"; then
        case "${opt}" in
        "-v" | "--version")
            builtin echo ${VERSION}
            builtin exit 0
            ;;
        "-h" | "--help")
            cat src/doc/configure.txt
            builtin exit 0
            ;;
        "-a" | "--all")
            VAR_install_config=true
            VAR_clear_history=true
            VAR_install_man=true
            VAR_install_html=true
            VAR_install_pdf=true
            VAR_install_usage=true
            ;;
        "--install-config")
            VAR_install_config=true
            ;;
        "--clear-history")
            VAR_clear_history=true
            ;;
        "--install-doc")
            VAR_install_man=true
            VAR_install_html=true
            VAR_install_pdf=true
            VAR_install_usage=true
            ;;
        "--install-man")
            VAR_install_man=true
            ;;
        "--install-html")
            VAR_install_html=true
            ;;
        "--install-pdf")
            VAR_install_pdf=true
            ;;
        "--install-usage")
            VAR_install_usage=true
            ;;
        "--skip-path")
            VAR_update_path=false
            ;;
            # TODO: Implement installation
            #--prefix\:*)
            #	PREFIX="${opt:8}"
            #	;;
        "-x")
            builtin set -x
            ;;
        *)
            warnh "Option '${opt}' invalid. Ignored"
            ;;
        esac
    else
        STDS=("${STDS[@]}" "${opt}")
    fi
done

# ========Check========
infoh "Checking FileSystem..."
#mkdir -p "${PREFIX}" || errh "Installation prefix ${PREFIX} cannot be accessed"
path_sh="etc/path.conf"
${VAR_update_path} && rm -f "${path_sh}"
if [ ! -f "${path_sh}" ] && [ -f 'etc/path.sh' ]; then mv 'etc/path.sh' "${path_sh}"; fi
if [ ! -f "${path_sh}" ]; then
    mkdir -p etc
    touch "${path_sh}"
    builtin echo "#!/usr/bin/env bash" >>"${path_sh}"
    builtin echo "# Generated at $(date)" >>"${path_sh}"
    #=====os=====
    if [ -z "${myos:-}" ]; then
        builtin mapfile -t < <(uname -mrs | tr ' ' '\n')                             # Do not use pipes; it will initiate a subshell
        builtin echo "myos=\"$(printf ${MAPFILE[0]})\" # $(printf ${MAPFILE[1]})" >>"${path_sh}"
    fi
    #=====path=====
    infoh "Enumerating valid path..."
    # shellcheck disable=SC2034
    INPATH="${PATH}"
    . lib/libpath
    builtin unset invalid_path duplicated_path
    # shellcheck disable=SC2154
    # shellcheck disable=SC2034
    builtin mapfile -t eachpath < <(builtin echo ${valid_path} | tr ':' '\n' )
    builtin unset binpath
    builtin echo ${valid_path} | tr ':' '\n'
    infoh "End locating valid path"
    builtin unset valid_path
    # shellcheck disable=SC1090
    for PROGNAME in ps python; do . "src/exec/find${PROGNAME}.sh"; done
    for PROGNAME in 7z 7za bgzip brotli bzip2 compress gzip lz4 lzfse lzip lzma lzop pbz2 pbzip pbzip2 pigz rar tar unzip unrar xz zip zstd \
        asciidoc asciidoctor-pdf asciidoctor \
        parallel \
        git clang gcc make libtool cc \
        sed grep split \
        gtar gsed ggrep gmake gsplit; do . src/exec/findornot.sh; done
    # To change myasciidoctor-pdf because bash do not support variable names with '-' inside
    sed -i".bak" 's;^myasciidoctor-pdf;myasciidoctor_pdf;' "${path_sh}"
    # shellcheck disable=SC1090
    . "${path_sh}"
    # shellcheck disable=SC2154
    [ "${mypbz2}" == 'ylukh' ] && [ "${mypbzip}" != 'ylukh' ] && sed -i".bak" 's;^mypbzip;mypbz2;' "${path_sh}"
    # shellcheck disable=SC1090
    . "${path_sh}"
    # shellcheck disable=SC2154
    [ "${mypbz2}" == 'ylukh' ] && [ "${mypbzip2}" != 'ylukh' ] && sed -i".bak" 's;^mypbzip2;mypbz2;' "${path_sh}"
    # shellcheck disable=SC1090
    . "${path_sh}"
    # Remove g for GNU CoreUtils installed under BSD systems
    # shellcheck disable=SC2154
    [ "${mygtar}" != 'ylukh' ] && sed -i".bak" 's;^mygtar;mytar;' "${path_sh}"
    # shellcheck disable=SC2154
    [ "${mygsed}" != 'ylukh' ] && sed -i".bak" 's;^mygsed;mysed;' "${path_sh}"
    # shellcheck disable=SC2154
    [ "${myggrep}" != 'ylukh' ] && sed -i".bak" 's;^myggrep;mygrep;' "${path_sh}"
    # shellcheck disable=SC2154
    [ "${mygmake}" != 'ylukh' ] && sed -i".bak" 's;^mygmake;mymake;' "${path_sh}"
    # shellcheck disable=SC2154
    [ "${mygsplit}" != 'ylukh' ] && sed -i".bak" 's;^mygsplit;mysplit;' "${path_sh}"
    infoh "All configurations are printed as follows:"
    cat "${path_sh}" | grep -v '^$' | grep -v '^#' | sort | while builtin read line; do builtin echo -e "${line}${NOCOLOR}"; done
fi
for STDI in "${STDS[@]}"; do
    builtin echo my"${STDI}" >>"${path_sh}"
done
. etc/path.conf
# shellcheck disable=SC2154
[ "${mymake}" = "ylukh" ] && errh "GNU Make not found"
#========Install ETC========
if ${VAR_install_config} && [ -d "etc" ]; then
    # shellcheck disable=SC2154
    "${mytar}" czf etc_backup.tgz etc
    infoh "Backing up settings...${GREEN}PASSED"
fi
#========Install VAR========
if ${VAR_clear_history} && [ -d "var" ]; then
    "${mytar}" czf var_backup.tgz var
    infoh "Backing up histories...${GREEN}PASSED"
fi
#========Install DOC========
# shellcheck disable=SC2154
if [ "${myasciidoctor}" == "ylukh" ]; then
    VAR_install_man=false
    [ "${myasciidoc}" == "ylukh" ] && VAR_install_html=false
fi
# shellcheck disable=SC2154
[ "${myasciidoctor_pdf}" != "ylukh" ] || VAR_install_pdf=false
# shellcheck disable=SC2154
[ "${mypython}" != "ylukh" ] || VAR_install_usage=false
if ${VAR_install_pdf}; then
    MAKE_TARGETS="${MAKE_TARGETS} share/doc/pdf"
    MAKE_ARGS="${MAKE_ARGS}:ADOC_PDF=\"${myasciidoctor_pdf}\""
fi
if ${VAR_install_man}; then
    MAKE_TARGETS="${MAKE_TARGETS} share/man"
    MAKE_ARGS="${MAKE_ARGS}:ADOC=\"${myasciidoctor}\""
fi
if ${VAR_install_usage}; then
    MAKE_TARGETS="${MAKE_TARGETS} share/doc/usage"
    MAKE_ARGS="${MAKE_ARGS}:ADOC=\"${myasciidoctor}\""
fi
if ${VAR_install_html}; then
    if [ "${myasciidoctor}" != "ylukh" ]; then
        MAKE_ARGS="${MAKE_ARGS}:ADOC=\"${myasciidoctor}\""
    else
        MAKE_ARGS="${MAKE_ARGS}:ADOC=\"${myasciidoc}\":AOPT=\"\""
    fi
    MAKE_TARGETS="${MAKE_TARGETS} share/doc/html"
fi
#========C========
# shellcheck disable=SC2154
[ "${mygcc}" != "ylukh" ] || [ "${myclang}" != "ylukh" ] || [ "${mycc}" != "ylukh" ] && [ "${mylibtool}" != "ylukh" ] && MAKE_TARGETS="${MAKE_TARGETS} C"
if cat "${path_sh}" | grep -i BSD >/dev/null; then
    MAKE_ARGS="${MAKE_ARGS}:CC=${myclang}:LIBTOOL=${mylibtool}" # Use Clang for FreeBSD.
elif [ "${mygcc}" != "ylukh" ]; then
    MAKE_ARGS="${MAKE_ARGS}:CC=${mygcc}:LIBTOOL=${mylibtool}"
elif [ "${myclang}" != "ylukh" ]; then
    MAKE_ARGS="${MAKE_ARGS}:CC=${myclang}:LIBTOOL=${mylibtool}"
elif [ "${mycc}" != "ylukh" ]; then
    MAKE_ARGS="${MAKE_ARGS}:CC=${mycc}:LIBTOOL=${mylibtool}"
fi
#========Makefile Generation========
MAKE_ARGS="${MAKE_ARGS}:PYTHON=${mypython}:RM=rm -rf:CP=cp -rf:PREFIX=${PREFIX}"
builtin echo "${MAKE_ARGS}" | sed 's;:;\'$'\nexport ;g' | sort | uniq >GNUmakefile
builtin echo "all: ${MAKE_TARGETS}" >>GNUmakefile
cat src/Makefile.in >>GNUmakefile
infoh "Finished. Please execute 'make' or 'gmake' (For BSD or macOS) to build the program"
