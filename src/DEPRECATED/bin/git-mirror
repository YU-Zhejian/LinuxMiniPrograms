#!/usr/bin/env bash
VERSION=1.8
DN="$(readlink -f "$(dirname "${0}")")"
set -ue
trap '' SIGINT
touch "${DN}"/../etc/git-mirror.conf
. "${DN}"/../lib/libisopt
. "${DN}"/../lib/libstr
. "${DN}"/../etc/path.conf
. "${DN}"/../etc/git-mirror.conf
. "${DN}"/exec/gitm/libgitm.sh
infoh "YuZJLab Git Mirror Manager"
infoh "Copyright (C) 2020-2021 YU Zhejian"
warnh "This program is no longer monitored and updates may not be provided"
STDS=()
UKOPT=()
HAVEHELP=false
HAVEVER=false
# ============ Possess arguments ============
for opt in "${@}"; do
    if isopt "${opt}"; then
        case "${opt}" in
        "-x")
            set -x
            ;;
        "-h" | "--help")
            HAVEHELP=true
            UKOPT=("${UKOPT[@]}" "${opt}")
            ;;
        "-v" | "--version")
            HAVEVER=true
            UKOPT=("${UKOPT[@]}" "${opt}")
            ;;
        --home\:*)
            GITM_HOME="${opt:7}"
            ;;
        *)
            UKOPT=("${UKOPT[@]}" "${opt}")
            ;;
        esac
    else
        STDS=("${STDS[@]}" "${opt}")
    fi
done
gmcmd=${STDS[0]:-}
unset "STDS[0]"
if [ -z "${GITM_HOME:-}" ]; then
    warnh "GITM_HOME undefined. Will use ${DN}/../var/git-mirror.d"
    GITM_HOME=${DN}/../var/git-mirror.d
fi
mkdir -p "${GITM_HOME}" "${GITM_HOME}/logs/" "${GITM_HOME}/uuidtable.d/"
cd "${GITM_HOME}"
ls uuidtable.d/* &>>/dev/null || touch uuidtable.d/"$(date '+%Y-%m-%d_%H-%M-%S')"
touch act.log
if [ "${gmcmd}" = "lscmd" ]; then
    # shellcheck disable=SC2010
    ls -1 "${DN}"/exec/gitm/ | grep -v lib | sed 's;\.sh$;;'
elif [ -f "${DN}"/exec/gitm/"${gmcmd}".co.exe ]; then
    exec "${DN}"/exec/gitm/"${gmcmd}".co.exe "${@}"
elif [ -f "${DN}"/exec/gitm/"${gmcmd}".py ]; then
    # shellcheck disable=SC2154
    if [ "${mypython}" != "ylukh" ]; then
        exec "${mypython}" "${DN}"/exec/gitm/"${gmcmd}".py "${@}"
    fi
elif [ -f "${DN}"/exec/gitm/"${gmcmd}".sh ]; then
    # shellcheck disable=SC1090
    . "${DN}"/exec/gitm/"${gmcmd}".sh
elif [ -z "${gmcmd}" ]; then
    ${HAVEHELP} && yldoc git-mirror
    ${HAVEVER} && echo "${VERSION}"
else
    errh "subcommand '${gmcmd}' invalid. Use '${0} lscmd' to get a list of available commands"
fi
